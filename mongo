#!/usr/bin/env node
const repl = require('repl');
const r = repl.start('Mongo Docs> ');
const fs = require('fs');
const readline = require('readline');
const {google} = require('googleapis');
let drive;
let oAuth2Client;
let collections;

// If modifying these scopes, delete credentials.json.
const SCOPES = ['https://www.googleapis.com/auth/drive'];
const TOKEN_PATH = 'credentials.json';

// Turn off returning undefined when the user doesn't enter a command.
r.ignoreUndefined = true;

// Load client secrets from a local file.
fs.readFile('client_secret.json', (err, content) => {
    if (err) return console.log('Error loading client secret file:', err);
    // Authorize a client with credentials, then call the Google Drive API.
    authorize(JSON.parse(content));
});

/**
 * Create an OAuth2 client with the given credentials, and then execute the
 * given callback function.
 * @param {Object} credentials The authorization client credentials.
 * @param {function} callback The callback to call with the authorized client.
 */
function authorize(credentials) {
    const {client_secret, client_id, redirect_uris} = credentials.installed;
    oAuth2Client = new google.auth.OAuth2(
        client_id, client_secret, redirect_uris[0]);

    // Check if we have previously stored a token.
    fs.readFile(TOKEN_PATH, (err, token) => {
        if (err) return getAccessToken(oAuth2Client);
        oAuth2Client.setCredentials(JSON.parse(token));
        drive = google.drive({version: 'v3', oAuth2Client});
    });
}

/**
 * Get and store new token after prompting for user authorization, and then
 * execute the given callback with the authorized OAuth2 client.
 * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.
 * @param {getEventsCallback} callback The callback for the authorized client.
 */
function getAccessToken(oAuth2Client) {
    const authUrl = oAuth2Client.generateAuthUrl({
        access_type: 'offline',
        scope: SCOPES,
    });
    console.log('Authorize this app by visiting this url:', authUrl);
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    rl.question('Enter the code from that page here: ', (code) => {
        rl.close();
        oAuth2Client.getToken(code, (err, token) => {
            if (err) return callback(err);
            oAuth2Client.setCredentials(token);
            // Store the token to disk for later program executions
            fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
                if (err) console.error(err);
                console.log('Token stored to', TOKEN_PATH);
            });
        });
    });
}

const oldEval = r.eval;
r.eval = function(cmd, ctx, filename, callback) {
    if (cmd.trim() === "show collections") {
        loadCollections(null, null).then(() => {
            Object.keys(collections).forEach(function(field, index) {
                console.log(field);
            });
            callback();
        });
        return;
    } else if (cmd.trim() === "exit") {
        console.log("bye");
        process.exit();
    }
    oldEval(cmd, ctx, filename, (err, out) => {
        if (err) {
            callback(err);
            return;
        }

        if (out && out.then) {
            out.then((v) => callback(null, v))
        } else {
            callback(null, out);
        }
    });
};

r.context.db = new Proxy({}, {
    get: function (target, prop, receiver) {
        return new Collection(prop);
    }
});

class Collection {
    constructor(collectionName) {
        this.collectionName = collectionName;
    }

    async insertOne(input) {
        let insertedIds = [];
        if (Array.isArray(input)) {
            console.log("Error: operation passed in cannot be an Array");
            return;
        }
        const res = await insertHelper(input, this.collectionName, insertedIds);
        if (res instanceof Error) {
            printError(res);
            return;
        }
        if (insertedIds.length > 0) {
            const result = {
                'acknowledged' : true,
                'insertedId' : insertedIds[0]
            };
            console.log(JSON.stringify(result, null, 2));
        }
    }

    async insert(input) {
        let insertedIds = [];
        const res = await insertHelper(input, this.collectionName, insertedIds);
        if (res instanceof Error) {
            printError(res);
            return;
        }
        if (insertedIds.length === 1 && (typeof input === "object" && !Array.isArray(input))) {
            console.log("WriteResult({ \"nInserted\" : 1 })");
        } else {
            console.log("BulkWriteResult({\n\t \"writeErrors\" : [ ],\
                \n\t \"writeConcernErrors\" : [ ],\
                \n\t \"nInserted\" : " + insertedIds.length + ",\
                \n\t \"nUpserted\" : 0,\
                \n\t \"nMatched\" : 0,\
                \n\t \"nModified\" : 0,\
                \n\t \"nRemoved\" : 0,\
                \n\t \"upserted\" : [ ],\
                \n})"
            );
        }
    }

    async find(input) {
        let files = [];
        await findHelper(input, files, this.collectionName);
        for (let idx in files) {
            await readFile(files[idx], input);
        }
    }

    async deleteOne(input) {
        let files = [];
        await findHelper(input, files, this.collectionName);
        let numDeleted = 0;
        if (files.length > 0) {
            const res = await drive.files.delete({
                auth: oAuth2Client,
                fileId: files[0].id
            });
            if (res instanceof Error) {
                printError(res);
                return;
            }
            numDeleted = 1;
        }
        const result = {
            'acknowledged' : true,
            'deletedCount' : numDeleted
        };
        printJSONFlat(result)
    }

    async deleteMany(input) {
        let files = [];
        await findHelper(input, files, this.collectionName);
        let numDeleted = 0;
        for (let idx in files) {
            const res = await drive.files.delete({
                auth: oAuth2Client,
                fileId: files[idx].id
            });
            if (res instanceof Error) {
                printError(res);
            } else {
                numDeleted++;
            }
        }
        const result = {
            'acknowledged': true,
            'deletedCount': numDeleted
        };
        printJSONFlat(result)
    }

    async updateOne(query, updates) {
        if (!updates.hasOwnProperty('$set')) {
            console.log('WriteError: Unknown modifier');
            return;
        }

        let files = [];
        await findHelper(query, files, this.collectionName);
        let numUpdated = 0;
        if (files.length > 0) {
            numUpdated = await updateDoc(updates['$set'], files[0]) ? 1 : 0;
        }
        const result = {
            'acknowledged': true,
            'matchedCount': files.length > 0 ? 1 : 0,
            'modifiedCount': numUpdated
        };
        printJSONFlat(result);
    }

    async updateMany(query, updates) {
        if (!updates.hasOwnProperty('$set')) {
            console.log('WriteError: Unknown modifier');
            return;
        }

        let files = [];
        await findHelper(query, files, this.collectionName);
        let numUpdated = 0;
        for (let idx in files) {
            numUpdated += await updateDoc(updates['$set'], files[idx]) ? 1 : 0;
        }
        const result = {
            'acknowledged': true,
            'matchedCount': files.length,
            'modifiedCount': numUpdated
        };
        printJSONFlat(result);
    }
}

async function loadCollections(collName, folderId) {
    // Check if collections.json exists on the server.
    const res = await drive.files.list({
        auth: oAuth2Client,
        q: "name='collections.json'",
        fields: 'files(id)',
        spaces: 'drive'
    });
    if (res instanceof Error) {
        printError(res);
        return;
    }
    if (res.data.files.length === 0) {
        // Create collections.jsons since it doesn't exist.
        const fileMetadata = {
            'name': 'collections.json',
            'mimeType': 'application/vnd.google-apps.document',
        };
        const media = {
            mimeType: 'text/plain',
            body: "{}"
        };

        const result = await drive.files.create({
            auth: oAuth2Client,
            resource: fileMetadata,
            media: media,
            fields: 'id'
        });
        if (result instanceof Error) {
            printError(result);
            return;
        }
        collections = {};
        return;
    }

    const result = await drive.files.export({
        auth: oAuth2Client,
        fileId: res.data.files[0].id,
        mimeType: "text/plain"
    });
    if (result instanceof Error) {
        printError(result);
        return;
    }
    collections = JSON.parse(result.data.trim());
    if (collName != null && folderId != null) {
        collections[collName] = folderId;
        let collectionsStr = JSON.stringify(collections);
        const r = await drive.files.update({
            auth: oAuth2Client,
            fileId: res.data.files[0].id,
            media: {
                body: collectionsStr
            }
        });
        if (r instanceof Error) {
            printError(r);
        }
    }
}

async function insertHelper(input, collName, insertedIds) {
    let document;
    // Check if input is a valid JSON.
    try {
        document = JSON.stringify(input);
        JSON.parse(document)
    } catch (e) {
        console.error(e);
        return;
    }
    if (!collections) {
        const err = await loadCollections(null, null);
        if (err instanceof Error) {
            printError(err);
            return;
        }
    }
    if (!collections.hasOwnProperty(collName)) {
        // This collection doesn't have a Drive folder yet, so we create one.
        const folderMetadata = {
            'name': collName,
            'mimeType': 'application/vnd.google-apps.folder'
        };
        const res = await drive.files.create({
            auth: oAuth2Client,
            resource: folderMetadata,
            fields: "id"
        });
        if (res instanceof Error) {
            printError(res);
            return;
        } else {
            await loadCollections(collName, res.data.id);
        }
    }
    // Check if we're inserting one document or many.
    if (!Array.isArray(input)) {
        // Insert one.
        const inOne = await insertOneHelper(document, collName, insertedIds);
        if (inOne instanceof Error) {
            console.error(inOne);
        }
        return;
    }
    // Insert many.
    for (let i in input) {
        if (typeof input[i] === "object" && !Array.isArray(input[i])) {
            try {
                var documentToInsert = JSON.stringify(input[i]);
            } catch (e) {
                console.error(e);
                return;
            }
            const inOne = await insertOneHelper(documentToInsert, collName, insertedIds);
            if (inOne instanceof Error) {
                console.error(inOne);
            }
        }
    }
}

async function insertOneHelper(document, collName, insertedIds) {
    // Upload the document.
    const fileMetadata = {
        'name': Date.now(),
        'mimeType': 'application/vnd.google-apps.document',
        parents: [collections[collName]]
    };
    const media = {
        mimeType: 'text/plain',
        body: document
    };

    const res = await drive.files.create({
        auth: oAuth2Client,
        resource: fileMetadata,
        media: media,
        fields: 'id'
    });

    if (res instanceof Error) {
        printError(res);
        return;
    }
    insertedIds.push(res.data.id);
}

async function findHelper(input, files, collName) {
    // Check if input is a valid JSON.
    try {
        let document = JSON.stringify(input);
        JSON.parse(document)
    } catch (e) {
        console.error(e);
    }

    // Check if we can query on the document ID.
    if (input.hasOwnProperty('_id')) {
        await findById(input["_id"], files);
    } else {
        // Construct our query with the given input.
        let query = "";
        if (!collections) {
            await loadCollections(null, null);
        }
        if (collections.hasOwnProperty(collName)) {
            Object.keys(input).forEach(function(field, index) {
                if (index === 0) {
                    query += "parents in " + "'" + collections[collName] + "' and "
                }
                if (index !== 0) {
                    query += " and "
                }
                if (typeof input[field] === "object" && !Array.isArray(input[field])) {
                    // Comparison match.
                    Object.keys(input[field]).forEach(function(op, idx) {
                        if (idx !== 0) {
                            query += " and "
                        }
                        query += "fullText contains " + "'" + field + ":'";
                    });
                } else {
                    query += "fullText contains " + "'" + field + ":" + input[field] + "'";
                }
            }.bind(this));
    
            const res = await drive.files.list({
                auth: oAuth2Client,
                q: query,
                fields: 'files',
                spaces: 'drive'
            });

            if (res instanceof Error) {
                printError(res);
                return;
            }
            res.data.files.forEach(function (file) {
                files.push(file);
            });
        } else {
            console.log("Collection '" + collName + "' has no documents.");
        }
    }
}

async function findById(fileId, files) {
    const res = await drive.files.get({
        auth: oAuth2Client,
        fileId: fileId
    });
    if (res instanceof Error) {
        printError(res);
        return;
    }
    files.push(res.data);
}

async function readFile(file, input) {
    if (file.mimeType !== "application/vnd.google-apps.document") {
        return;
    }
    const res = await drive.files.export({
        auth: oAuth2Client,
        fileId: file.id,
        mimeType: "text/plain"
    });
    if (res instanceof Error) {
        printError(res);
        return;
    }
    let result = JSON.parse(res.data.trim());
    for (let field in input) {
        if (input.hasOwnProperty(field)) {
            // Nested field object means comparison query operator.
            if (typeof input[field] === "object" && !Array.isArray(input[field])) {
                for (let op in input[field]) {
                    if (input[field].hasOwnProperty(op)) {
                        if ((op === "$gt" && result[field] <= input[field][op])
                            || (op === "$gte" && result[field] < input[field][op])
                            || (op === "$lt" && result[field] >= input[field][op])
                            || (op === "$lte" && result[field] > input[field][op])
                            || (op === "$eq" && result[field] !== input[field][op])
                            || (op === "$neq" && result[field] === input[field][op]))
                        {
                            return;
                        }
                    }
                }
            }
        }
    }
    printJSONFlat(Object.assign({"_id":file.id}, result));
}

async function updateDoc(updates, file) {
    const res = await drive.files.export({
        auth: oAuth2Client,
        fileId: file.id,
        mimeType: "text/plain"
    });
    if (res instanceof Error) {
        printError(res);
        return;
    }

    let doc = JSON.parse(res.data.trim());

    let updated = false;
    for (let key in updates) {
        if (doc.hasOwnProperty(key) && doc[key] !== updates[key]) {
            updated = true;
        }
        doc[key] = updates[key];
    }

    let docStr = JSON.stringify(doc);
    const uRes = await drive.files.update({
        auth: oAuth2Client,
        fileId: file.id,
        media: {
            body: docStr
        }
    });
    if (uRes instanceof Error) {
        printError(uRes);
    }

    return updated;
}

function printJSONFlat(json) {
    console.log(JSON.stringify(json).split(':').join(' : ')
        .split('{').join(' { ')
        .split('}').join(' } ')
        .split(',').join(', ')
        .trim());
}

function printError(e) {
    console.error("Error", e.stack);
    console.error("Error", e.name);
    console.error("Error", e.message);
}
