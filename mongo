const repl = require('repl');
const r = repl.start('Mongo Docs> ');
const fs = require('fs');
const readline = require('readline');
const {google} = require('googleapis');
var drive;
var oAuth2Client;
var collections;

// If modifying these scopes, delete credentials.json.
const SCOPES = ['https://www.googleapis.com/auth/drive'];
const TOKEN_PATH = 'credentials.json';

// Turn off returning undefined when the user doesn't enter a command.
r.ignoreUndefined = true;

// Load client secrets from a local file.
fs.readFile('client_secret.json', (err, content) => {
    if (err) return console.log('Error loading client secret file:', err);
    // Authorize a client with credentials, then call the Google Drive API.
    authorize(JSON.parse(content));
});

/**
 * Create an OAuth2 client with the given credentials, and then execute the
 * given callback function.
 * @param {Object} credentials The authorization client credentials.
 * @param {function} callback The callback to call with the authorized client.
 */
function authorize(credentials) {
    const {client_secret, client_id, redirect_uris} = credentials.installed;
    oAuth2Client = new google.auth.OAuth2(
        client_id, client_secret, redirect_uris[0]);

    // Check if we have previously stored a token.
    fs.readFile(TOKEN_PATH, (err, token) => {
        if (err) return getAccessToken(oAuth2Client);
        oAuth2Client.setCredentials(JSON.parse(token));
        drive = google.drive({version: 'v3', oAuth2Client});
    });
}

/**
 * Get and store new token after prompting for user authorization, and then
 * execute the given callback with the authorized OAuth2 client.
 * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.
 * @param {getEventsCallback} callback The callback for the authorized client.
 */
function getAccessToken(oAuth2Client) {
    const authUrl = oAuth2Client.generateAuthUrl({
        access_type: 'offline',
        scope: SCOPES,
    });
    console.log('Authorize this app by visiting this url:', authUrl);
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    rl.question('Enter the code from that page here: ', (code) => {
        rl.close();
        oAuth2Client.getToken(code, (err, token) => {
            if (err) return callback(err);
            oAuth2Client.setCredentials(token);
            // Store the token to disk for later program executions
            fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
                if (err) console.error(err);
                console.log('Token stored to', TOKEN_PATH);
            });
        });
    });
}

/**
 * Lists the names and IDs of up to 10 files.
 * @param {google.auth.OAuth2} auth An authorized OAuth2 client.

function listFiles(auth) {
    const drive = google.drive({version: 'v3', auth});
    drive.files.list({
        pageSize: 10,
        fields: 'nextPageToken, files(id, name)',
    }, (err, res) => {
        if (err) return console.log('The API returned an error: ' + err);
        const files = res.data.files;
        if (files.length) {
            console.log('Files:');
            files.map((file) => {
                console.log(`${file.name} (${file.id})`);
            });
        } else {
            console.log('No files found.');
        }
    });
}
 */

const oldEval = r.eval;
r.eval = function(cmd, ctx, filename, callback) {
    oldEval(cmd, ctx, filename, (err, out) => {
        if (err) {
            callback(err);
            return;
        }

        if (out && out.then) {
            out.then((v) => callback(null, v))
        } else {
            callback(null, out);
        }
    });
};

r.context.db = new Proxy({}, {
    get: function (target, prop, receiver) {
        return new Collection(prop);
    }
});

r.context.exit = function () {
    console.log("bye");
    process.exit();
};

class Collection {
    constructor(collectionName) {
        this.collectionName = collectionName;
    }

    async insertOne(input) {
        // Check if input is a valid JSON.
        try {
            var document = JSON.stringify(input);
            JSON.parse(document)
        } catch (e) {
            console.error(e);
            return;
        }
        loadCollections();
        if (!collections.hasOwnProperty(this.collectionName)) {
            // This collection doesn't have a Drive folder yet, so we create one.
            const folderMetadata = {
                'name': this.collectionName,
                'mimeType': 'application/vnd.google-apps.folder'
            };
            const res = await drive.files.create({
                auth: oAuth2Client,
                resource: folderMetadata,
                fields: "id"
            }).catch(e => { console.log(e) });
            if (res instanceof Error) {
                console.error(res);
                return;
            } else {
                collections[this.collectionName] = res.data.id;
                const error = fs.writeFileSync('collections.json', JSON.stringify(collections));
                if (error instanceof Error) {
                    throw error;
                }
            }
        }
        // Upload the document.
        const uuid = Date.now();
        const fileMetadata = {
            'name': uuid,
            'mimeType': 'application/vnd.google-apps.document',
            parents: [collections[this.collectionName]]
        };
        const media = {
            mimeType: 'text/plain',
            body: document
        };

        const res = await drive.files.create({
            auth: oAuth2Client,
            resource: fileMetadata,
            media: media,
            fields: 'id'
        }).catch(e => { console.log(e) });

        if (res instanceof Error) {
            console.error(res);
        } else {
            const result = {
                'acknowledged' : true,
                'insertedId' : res.data.id
            };
            console.log(JSON.stringify(result, null, 2));
        }
    }

    async find(input) {
        let files = [];
        const res = await findHelper(input, files, this.collectionName);
        if (res instanceof Error) {
            console.log(res);
        }
        for (let idx in files) {
            const rRes = await readFile(files[idx]);
        }
    }

    async deleteOne(input) {
        let files = [];
        const res = await findHelper(input, files, this.collectionName);
        if (res instanceof Error) {
            console.log(res);
        }
        let numDeleted = 0;
        if (files.length > 0) {
            const dRes = await drive.files.delete({
                auth: oAuth2Client,
                fileId: files[0].id
            }).catch(e => { console.log(e) });
            if (dRes instanceof Error) {
                console.log(res);
                return;
            }
            numDeleted = 1;
        }
        const result = {
            'acknowledged' : true,
            'deletedCount' : numDeleted
        };
        console.log(fixSpacing(result));
    }

    async deleteMany(input) {
        let files = [];
        const res = await findHelper(input, files, this.collectionName);
        if (res instanceof Error) {
            console.log(res);
        }
        let numDeleted = 0;
        for (let idx in files) {
            const dRes = await drive.files.delete({
                auth: oAuth2Client,
                fileId: files[idx].id
            }).catch(e => { console.log(e) });
            if (dRes instanceof Error) {
                console.log(res);
            } else {
                numDeleted++;
            }
        }
        const result = {
            'acknowledged': true,
            'deletedCount': numDeleted
        };
        console.log(fixSpacing(result));
    }
}

function loadCollections() {
    let collectionNamesFile;
    if (!fs.existsSync('collections.json')) {
        const error = fs.writeFileSync('collections.json', "{}");
        if (error instanceof Error) {
            throw error;
        }
    }
    collections = JSON.parse(fs.readFileSync('collections.json'));
}

async function findHelper(input, files, collName) {
    // Check if input is a valid JSON.
    try {
        var document = JSON.stringify(input);
        JSON.parse(document)
    } catch (e) {
        console.error(e);
    }

    // Check if we can query on the document ID.
    if (input.hasOwnProperty('_id')) {
        const res = await findById(input["_id"], files);
    } else {
        // Construct our query with the given input.
        let query = "";
        if (!collections) {
            loadCollections();
        }
        if (collections.hasOwnProperty(collName)) {
            Object.keys(input).forEach(function(field, index) {
                if (index === 0) {
                    query += "parents in " + "'" + collections[collName] + "' and "
                }
                if (index !== 0) {
                    query += " and "
                }
                query+= "fullText contains " + "'" + field + ": " + input[field] + "'";
            }.bind(this));

            const res = await drive.files.list({
                auth: oAuth2Client,
                q: query,
                fields: 'files',
                spaces: 'drive'
            }).catch(e => { console.log(e) });

            if (res instanceof Error) {
                console.error(res);
                return;
            }
            res.data.files.forEach(function (file) {
                files.push(file);
            });
        } else {
            console.log("Collection '" + collName + "' has no documents.");
        }
    }
}

async function findById(fileId, files) {
    const res = await drive.files.get({
        auth: oAuth2Client,
        fileId: fileId
    }).catch(e => { console.log(e) });
    if (res instanceof Error) {
        console.error(res);
        return;
    }
    files.push(res.data);
}

async function readFile(file) {
    const res = await drive.files.export({
        auth: oAuth2Client,
        fileId: file.id,
        mimeType: "text/plain"
    });
    if (res instanceof Error) {
        console.error(res);
        return;
    }
    let result = JSON.parse(res.data.trim());
    console.log(fixSpacing(Object.assign({"_id":file.id}, result)));
}

function fixSpacing(json) {
    return JSON.stringify(json).split(':').join(' : ')
        .split('{').join(' { ')
        .split('}').join(' } ')
        .split(',').join(', ')
        .trim();
}
